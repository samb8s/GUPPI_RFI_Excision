import mmap
import sys
import os
import time
from ra_header import *
from ra_format import *
from ra_analyze import *
from copy import deepcopy 
import numpy as np

def read_guppi_header(header):

    loc = header.find("BLOCSIZE")
    blocsize = int(header[loc:loc+80].split("=")[1])

    loc = header.find("OBSNCHAN")
    obsnchan = int(header[loc:loc+80].split("=")[1])

    loc = header.find("OVERLAP")
    overlap = int(header[loc:loc+80].split("=")[1])

    loc = header.find("NPOL")
    npol = int(header[loc:loc+80].split("=")[1])

    loc = header.find("NBITS")
    nbits = int(header[loc:loc+80].split("=")[1])

    loc = header.find("TBIN")
    tbin = float(header[loc:loc+80].split("=")[1])

    loc = header.find("END     ")
    headerSize = loc + 80

    return headerSize, blocsize, obsnchan, overlap, npol, nbits, tbin

def main(infile,frscfile):

    Diag = True

# This number is required to be longer than any GUPPI header
    MAX_HEADER_LEN = 8192

# This number was derived manually, but could have been derived by the code
# it is the number of frsc blocks that fit into a GUPPI block, excluding the overlap region
    FB_PER_GB = 252

# This is the threshold at which to apply the statustics (probably should be an input number)

    FRSC_THRESH = 0.5 

# memmap the GUPPI data

    fp = np.memmap(infile,dtype='int8',mode='r+')
    fileLen = fp.size

# read in the arrays which have been created by pythonFrsc.py

    npzfile = np.load(frscfile)
    xiMean = npzfile['xiMean']
    xqMean = npzfile['xqMean']
    yiMean = npzfile['yiMean']
    yqMean = npzfile['yqMean']
    xxMean = npzfile['xxMean']
    xxRMS  = npzfile['xxRMS']
    yyMean = npzfile['yyMean']
    yyRMS  = npzfile['yyRMS']

# create arrays which is the "mean" of the means, to be used as the
# replacement values

    goodMean = np.zeros((512,4))
    goodMean[:,0] = np.mean(xiMean,axis=0)
    goodMean[:,1] = np.mean(xqMean,axis=0)
    goodMean[:,2] = np.mean(yiMean,axis=0)
    goodMean[:,3] = np.mean(yqMean,axis=0)

    print goodMean[:,0]
    print goodMean[:,1]
    print goodMean[:,2]
    print goodMean[:,3]

# Now iterate over the GUPPI blocks, one by one

    loc = 0           # location within the GUPPI raw data file
    guppiHeader = 0   # which GUPPI header are we looking at
    iFrscArray  = 0   # location in the FRSC results arrays
    iLastGood   = 0   # location of last "good" FRSC block
    iReplaced   = 0   # number of samples replaced

    while (loc < fileLen):
        header = np.copy(fp[loc:loc+MAX_HEADER_LEN]).tostring()
        headerSize, blockSize, obsnchan, overlap, npol, nbits, tbin = read_guppi_header(header)
        if Diag:
            print
            print "Location", loc
            print "Header", guppiHeader
            print "Header size", headerSize
            print "Block size", blockSize

        loc = loc + headerSize
        guppiHeader = guppiHeader + 1

# figure out the basic size of the GUPPI block

        ndim = blockSize / (obsnchan*npol*(nbits/8))
        blockTime = tbin * ndim
        ndim1 = blockSize / (obsnchan*npol*(nbits/8))-overlap
        uniqueTime = tbin * ndim1
        frscLength = ndim1 / FB_PER_GB

        if Diag:
            print "Derived Quantities:"
            print "   There are", ndim, "time samples for each frequency channel"
            print "   There are", ndim1, "non-overlap time samples for each frequency channel"
            print "   Block time in seconds is", blockTime
            print "   Block time in seconds is (no overlap)", uniqueTime
            print "   There are", frscLength, "samples per FRSC block"
            print "   TBIN is", tbin

# now iterate over all the FRSC blocks in this guppi block

        frscLoc = loc
        for i in range(FB_PER_GB):
            if Diag:
                print "Frsc Location", frscLoc

# get the size of the data chunk

            chunkSize = frscLength * (obsnchan*npol*(nbits/8))

# use the xx statistics as the discriminant

            mean = xxMean[iFrscArray,:]
            rms  = xxRMS[iFrscArray,:]
            ratio = np.absolute((rms/mean)-1.0)

            if any(ratio > FRSC_THRESH):
                if Diag:
                    print "FRSC Block ", iFrscArray, "exceeds threshold"

# ok, we need to process this FRSC block

# get the chunk of data to process

                chunk = fp[frscLoc:frscLoc+chunkSize]

# reshape it to the correct shape
                chunk = np.reshape(chunk,(obsnchan,frscLength,npol))

# loop over each sample, replacing values with mean for those channels which
# failed the test

                for chan in range(obsnchan):
                    if ratio[chan] > FRSC_THRESH:
                        for pol in range(npol):
                            if Diag:
                                print "Channel, pol", chan , pol
                                print "mean", goodMean[chan,pol]
                                print "old values", chunk[chan,:,pol]
                            chunk[chan,:,pol] = goodMean[chan,pol]
                            if Diag:
                                print "new values", chunk[chan,:,pol]

# increment the locator within this GUPPI block, and FRSC results array locator

            frscLoc = frscLoc + chunkSize
            iFrscArray = iFrscArray + 1

# Done with this GUPPI block. Increment locator to end of the block (including overlap)

        loc = loc + blockSize

# all done. Flush the changes to disk

    fp.flush()

    print
    print "Goodbye."

if __name__ == "__main__":
#    infile = "/lustre/pulsar/scratch/RFI/56827/guppi_56827_NGC6946_0001.0000.raw"
    infile = "/lustre/pulsar/scratch/RFI/frsced.raw"
    frscfile = "/lustre/pulsar/scratch/RFI/frsced.npz"

    main(infile,frscfile)
